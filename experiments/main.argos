<?xml version="1.0"?>
<argos-configuration>
  <!-- ************************* -->
  <!-- * General configuration * -->
  <!-- ************************* -->
  <framework>
    <!--
      System configuration:
      - threads: the number of slave threads to parallelize the
        computation. For less than 100 robots thread management is not
        beneficial, so here we set it to 0. When set to 0, it means that
        the computation is not parallelized: the main thread does
        everything.
    -->
    <system threads="0"/>
    <!--
      Experiment configuration:
      - length: total experiment time in seconds (0 means the experiment
        has no time limit)
      - method: task assignment method for the threads (balance_quantity for
          homogeneous, balance_length for heterogeneous).
      - ticks_per_second: number of ticks per second (int value)
      - random_seed: seed of the main random number generator. If unset
        or set to zero, this value is taken from the clock and a warning
        message is displayed.
    -->
    <experiment length="0" ticks_per_second="10" random_seed="155786226"/>
    <!--
      Profiling configuration: this collects and saves information
      about memory and CPU usage.
      -  format: human_readable/table
    -->
    <profiling file="output/profile_0.log" format="table" truncate_file="true"/>
  </framework>
  <!-- *************** -->
  <!-- * Controllers * -->
  <!-- *************** -->
  <controllers>
    <!-- 
      Here you list the controllers to be used in the experiment.
      The XML tag is set by the REGISTER_CONTROLLER(class, "tag") macro.
      You find it in the .cpp file of your controller.
      For this example, the macro is called in
      controllers/footbot_diffusion.cpp:100.
    -->
    <!--
      The attributes are:
      - id: a unique a identifier for this controller, to be used in the
        subsequent <arena> section to say which robots use which
        controller
      - library: the path to the compiled library containing you
        controller.
    -->
    <!-- Eye-bot controller -->
    <main_controller id="ecc" library="build/controllers/main/libmain.so">
      <!--
        The <actuators> section contains a list of the actuators used by
        this controller.
        If you forget a to mention an actuator here and then request it
        in the controller, an error occurs.
        For a list of the possible actuators, type at the command prompt:
        $ launch_argos -q actuators

        Multiple implementations of an actuator are possible. To
        identify which one you want to use, pass it in the
        'implementation' attribute below. When you type the 'argos3 -q'
        command, the implementation is in the square brackets following
        the name of the device:

        $ argos3 -q actuators
        ...
        footbot_wheels [default]
        ...
      -->
      <actuators>
        <quadrotor_position implementation="default"/>
        <range_and_bearing implementation="default"/>
        <leds implementation="default" medium="leds"/>
      </actuators>
      <!--
        The <sensors> section contains a list of the sensors used by
        this controller.
        If you forget a to mention a sensor here and then request it in
        the controller, an error occurs.
        For a list of the possible sensors, type at the command prompt:
        $ argos3 -q sensors
      -->
      <sensors>
        <positioning implementation="default" pos_noise_range="0.1:0.2" angle_noise_range="-10.5:13.7" axis_noise_range="-0.3:0.4"/>
        <colored_blob_perspective_camera implementation="default" medium="leds"/>
        <eyebot_proximity implementation="default"/>
        <range_and_bearing implementation="medium" medium="rab" rab_data_size="1048576" show_rays="true"/>
      </sensors>
      <!--
        The <params> section is passed as-is to the controller's Init()
        function.
        The user, writing the controller, defines how it is organized.
        To understand what these parameters are for, check the
        controller's header file in
        controllers/footbot_diffusion/footbot_diffusion.h.
      -->
      <params>
        <state initial_rest_to_move_prob="0.1" social_rule_rest_to_move_delta_prob="0.01" initial_rest_to_land_prob="0.1" social_rule_rest_to_land_delta_prob="0.01" minimum_rest_time="50" initial_minimum_hold_time="10" maximum_hold_time="30" global_reach="2.0" proximity_tolerance="0.4" attitude="0.0"/>
        <swarm particles="20" self_trust="0.2" past_trust="0.1" global_trust="0.7" ants="20" launch_step="500"/>
        <random mapping_mean="0.0" mapping_stddev="0.01" mapping_seed="813" moving_seed="824" landing_seed="2451" aco_seed="5525" task_completed_seed="123" target_shuffle_seed="313"/>
        <experiment name="pso" naive_mapping="true" trials="1" target="0.90" csv="output/data_0.csv" maximum_sim_step="20000" trial_num="0"/>
        <lawn vstep="0.2" hstep="0.2"/>
      </params>
    </main_controller>
  </controllers>
  <!-- *********************** -->
  <!-- * Arena configuration * -->
  <!-- *********************** -->
  <!--
    Here you place all the objects in the arena.
    All linear measures are expressed in meters.
    Angles are expressed in degrees.
    The 'size' attribute contains the size of the arena around the
    origin.
    To get help about which entities are available, type at the command
    prompt:
    
    $ argos3 -q entities

    and to get help about a specific entity (for instance, the box)

    $ argos3 -q box
  -->
  <arena size="10, 10, 5" center="0.0, 0.0, 1.5" positional_grid_size="10, 10, 5">
    <!-- Place four boxes in a square to delimit the arena -->
    <box id="wall_north" size="4, 0.1, 2" movable="false">
      <body position="0, 1, 0" orientation="0, 0, 0"/>
    </box>
    <!--
      You can distribute entities randomly.
      methods include: uniform, gaussian, constant and grid.
    -->
    <distribute>
      <position method="gaussian" mean="0.0, 0.9, 1.0" std_dev="0.6, 0.0, 0.3" position="-4.59862,0,4.59862"/>
      <orientation method="gaussian" mean="0, 0, 0" std_dev="360, 0, 0"/>
      <entity quantity="2" max_trials="100">
        <!-- Place x quantity light sources as target plants on the wall -->
        <light id="light" color="white" intensity="3.0" medium="leds"/>
      </entity>
    </distribute>
    <distribute>
      <position method="grid" center="0, -4, 0" distances="1, 1, 0" layout="5, 2, 5" position="-4.59862,0,4.59862"/>
      <orientation method="gaussian" mean="0, 0, 0" std_dev="360, 0, 0"/>
      <entity quantity="4" max_trials="100"> --&gt;
        <!-- Place an eye-bot and bind it to the controller -->
        <eye-bot id="eb" camera_aperture="80" camera_focal_length="0.07" camera_range="10"><controller config="ecc"/></eye-bot>
      </entity>
    </distribute>
  </arena>
  <!-- ******************* -->
  <!-- * Physics engines * -->
  <!-- ******************* -->
  <!--
    In ARGoS, multiple physics engines can run at the same time.
    In this section you say which engines to use for the experiment.
    To know which engines are available, type at the command prompt:
    
    $ argos3 -q physics_engines
  -->
  <physics_engines>
    <!--
      Use a 2D and 3D dynamics engine.
    -->
    <dynamics2d id="dyn2d"/>
    <pointmass3d id="pm3d" iterations="10"/>
  </physics_engines>
  <!-- ********* -->
  <!-- * Media * -->
  <!-- ********* -->
  <!--
    Here you specify the media in use. Media allow robots to communicate.
    In this experiment, robots do not communicate, so no media are
    specified.
    To know which media are available, type at the command prompt:

    $ argos3 -q media
  -->
  <media>
    <led id="leds"/>
    <range_and_bearing id="rab"/>
  </media>
  <!-- ****************** -->
  <!-- * Visualization * -->
  <!-- ****************** -->
  <!--
    Here you specify which visualization to use.
    You can also not specify a visualization at all, in which case ARGoS
    will run without showing anything.
    Having no visualization is useful when you run ARGoS in a batch of
    experiments to collect statistics.
    To know which visualizations are available, type at the command
    prompt:

    $ argos3 -q visualizations
  -->
  <visualization/>
</argos-configuration>
